{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":10811945,"sourceType":"datasetVersion","datasetId":6711903}],"dockerImageVersionId":30918,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false},"colab":{"name":"KNN model","provenance":[{"file_id":"https://storage.googleapis.com/kaggle-colab-exported-notebooks/knn-model-96a60ce0-13ad-4653-aff7-0c4dd4ddc543.ipynb?X-Goog-Algorithm=GOOG4-RSA-SHA256&X-Goog-Credential=gcp-kaggle-com%40kaggle-161607.iam.gserviceaccount.com/20250226/auto/storage/goog4_request&X-Goog-Date=20250226T134122Z&X-Goog-Expires=259200&X-Goog-SignedHeaders=host&X-Goog-Signature=838e4547ccde454c6c3f853022498b7dac0e9a46e3b927fe4b1c181268bc369bc7d86ab46a74f98194edb05b836834d64d1676d48e87e2c6d5e527422ae0c9f833c9bc7f59c7bdb296dd9abf094f63dd9c62fed86e6c979d7f6020f4803efc4a63941851cbf9738b492f5e005086ae81f39b6ec9a824032b814a6238182909d06ed3decf85f60028a85eb4b6b876105e93fa26f9c66b0a9427a774ea00009e26a26cdf55ff4d45be90bb6cd43f00702032775465f2eb4fedbe479b483671794a0a46b9b525bc82aaba37797643174440650a0e224b25cd0b82fed14455f6c0f58e1a0f07d27006ff91daf4d3a181078b2f4076f60363347ebed69adcfb694649","timestamp":1740581819352}]}},"nbformat_minor":0,"nbformat":4,"cells":[{"cell_type":"code","source":["import pandas as pd\n","from sklearn.model_selection import train_test_split, cross_val_score, StratifiedKFold, GridSearchCV\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.feature_selection import SelectFromModel\n","from sklearn.linear_model import LassoCV\n","from sklearn.neighbors import KNeighborsClassifier\n","from sklearn.metrics import classification_report, accuracy_score, precision_score, recall_score, f1_score, confusion_matrix\n","from sklearn.neural_network import MLPRegressor\n","from sklearn.decomposition import PCA\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","\n","\n","# Load dataset\n","data_path = \"/kaggle/input/divorce/divorce.xlsx\"  # Adjust based on !ls output\n","data = pd.read_excel(data_path, engine=\"openpyxl\")\n","\n","# Separate features and target variable\n","X = data.drop('Class', axis=1)\n","y = data['Class']\n","\n","# Standardize the features\n","scaler = StandardScaler()\n","X_scaled = scaler.fit_transform(X)\n","\n","\n","# Feature selection using Lasso (L1 regularization) for sparsity\n","lasso = LassoCV(cv=5).fit(X_scaled, y)\n","importance = np.abs(lasso.coef_)\n","\n","# Select features with non-zero importance\n","selector = SelectFromModel(lasso, prefit=True)\n","X_selected = selector.transform(X_scaled)\n","\n","# Train an autoencoder for self-supervised learning\n","autoencoder = MLPRegressor(hidden_layer_sizes=(64, 32, 64), max_iter=1000, random_state=42)\n","autoencoder.fit(X_scaled, X_scaled)\n","\n","# Use the encoder part to transform the data\n","X_encoded = autoencoder.predict(X_scaled)\n","\n","# Apply PCA to reduce dimensionality if needed\n","pca = PCA(n_components=32)\n","X_pca = pca.fit_transform(X_encoded)\n","\n","# Split the data into training and testing sets\n","X_train, X_test, y_train, y_test = train_test_split(X_pca, y, test_size=0.2, random_state=42)\n","\n","# Define the parameter grid for GridSearchCV\n","param_grid = {'n_neighbors': [3, 5, 7, 9, 11]}\n","\n","# Initialize the KNN model\n","knn = KNeighborsClassifier()\n","\n","# Set up the grid search\n","grid_search = GridSearchCV(knn, param_grid, cv=5, scoring='accuracy')\n","grid_search.fit(X_train, y_train)\n","\n","# Best parameters and score\n","best_params = grid_search.best_params_\n","best_score = grid_search.best_score_\n","\n","print(f\"Best Parameters: {best_params}\")\n","print(f\"Best Cross-Validation Score: {best_score}\")\n","\n","# Train the final KNN model with the best parameters\n","knn_best = KNeighborsClassifier(n_neighbors=best_params['n_neighbors'])\n","knn_best.fit(X_train, y_train)\n","\n","# Predict and evaluate the model\n","y_pred = knn_best.predict(X_test)\n","accuracy = accuracy_score(y_test, y_pred)\n","precision = precision_score(y_test, y_pred, average='weighted')\n","recall = recall_score(y_test, y_pred, average='weighted')\n","f1 = f1_score(y_test, y_pred, average='weighted')\n","report = classification_report(y_test, y_pred)\n","conf_matrix = confusion_matrix(y_test, y_pred)\n","\n","# Cross-validation\n","cv = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)\n","cv_scores = cross_val_score(knn_best, X_pca, y, cv=cv, scoring='accuracy')\n","\n","# Print performance metrics\n","print(f\"Accuracy: {accuracy}\")\n","print(f\"Precision: {precision}\")\n","print(f\"Recall: {recall}\")\n","print(f\"F1 Score: {f1}\")\n","print(\"Classification Report:\")\n","print(report)\n","print(\"Confusion Matrix:\")\n","print(conf_matrix)\n","\n","# Print cross-validation scores\n","print(f\"Cross-Validation Scores: {cv_scores}\")\n","print(f\"Mean Cross-Validation Score: {np.mean(cv_scores)}\")\n","\n","# Plot confusion matrix\n","plt.figure(figsize=(8, 6))\n","sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=np.unique(y), yticklabels=np.unique(y))\n","plt.xlabel('Predicted')\n","plt.ylabel('Actual')\n","plt.title('Confusion Matrix')\n","plt.show()\n","\n","# Print cross-validation scores\n","print(f\"Cross-Validation Scores: {cv_scores}\")\n","print(f\"Mean Cross-Validation Score: {np.mean(cv_scores)}\")\n"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-25T12:57:25.742968Z","iopub.execute_input":"2025-02-25T12:57:25.743505Z","iopub.status.idle":"2025-02-25T12:57:27.015043Z","shell.execute_reply.started":"2025-02-25T12:57:25.743473Z","shell.execute_reply":"2025-02-25T12:57:27.013665Z"},"id":"_WbPYaK-fZJq","outputId":"57840c80-2eed-46d8-bb15-48a28efdc189"},"outputs":[{"name":"stdout","text":"Best Parameters: {'n_neighbors': 3}\nBest Cross-Validation Score: 0.9777777777777779\nAccuracy: 0.9705882352941176\nPrecision: 0.972549019607843\nRecall: 0.9705882352941176\nF1 Score: 0.9707182607791127\nClassification Report:\n              precision    recall  f1-score   support\n\n           0       0.93      1.00      0.97        14\n           1       1.00      0.95      0.97        20\n\n    accuracy                           0.97        34\n   macro avg       0.97      0.97      0.97        34\nweighted avg       0.97      0.97      0.97        34\n\nConfusion Matrix:\n[[14  0]\n [ 1 19]]\nCross-Validation Scores: [0.97058824 1.         1.         0.97058824 0.94117647]\nMean Cross-Validation Score: 0.9764705882352942\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 800x600 with 2 Axes>","image/png":"\n"},"metadata":{}},{"name":"stdout","text":"Cross-Validation Scores: [0.97058824 1.         1.         0.97058824 0.94117647]\nMean Cross-Validation Score: 0.9764705882352942\n","output_type":"stream"}],"execution_count":null},{"cell_type":"code","source":[],"metadata":{"trusted":true,"id":"6qFrqtMkfZJw"},"outputs":[],"execution_count":null}]}