{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":10834793,"sourceType":"datasetVersion","datasetId":6728330}],"dockerImageVersionId":30918,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false},"colab":{"name":"SVM MODEL","provenance":[{"file_id":"https://storage.googleapis.com/kaggle-colab-exported-notebooks/svm-model-bab70034-5cac-4b47-9cbc-5888d36de60d.ipynb?X-Goog-Algorithm=GOOG4-RSA-SHA256&X-Goog-Credential=gcp-kaggle-com%40kaggle-161607.iam.gserviceaccount.com/20250226/auto/storage/goog4_request&X-Goog-Date=20250226T145240Z&X-Goog-Expires=259200&X-Goog-SignedHeaders=host&X-Goog-Signature=af506484f970ab25b9260aef22a06b1fbc2a70309949731aee8cadac61bf3fa78de1ef54ee4e82de826b0457f7693a2c52869046ba1cdbf17dd6241c888751038d36abac18cd1a8a63dc753c8b94b2f287e8e304e9bd843a3b99400b02a96961ea599407656cf0b480f4c542f380486c8f71ec7577acf3ca0087720bc58719a6c1077deaa040eaf0155c1fa9602217c2e46a560d7b9c4bef95ac679091a66336ca6bab1138c48c7f4ecd4d52c7bc48a1227a00952752b4365687b4eab7a97f713d691994697001373dd314c9e4329df33d7c9564bed2cd8d28a0a0abc7ac8510cc5d8e8e8792e97f548feb109f7f51ba5778584b7dd7c94e8648d4f205eaeae0","timestamp":1740581841971}]}},"nbformat_minor":0,"nbformat":4,"cells":[{"cell_type":"markdown","source":["# import the dependencies or libraries"],"metadata":{"id":"7cleN003vtq1"}},{"cell_type":"code","source":["import pandas as pd\n","from sklearn.model_selection import train_test_split\n","from sklearn.svm import SVC\n","from sklearn.metrics import accuracy_score, classification_report, confusion_matrix\n","import joblib"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-26T07:38:03.421982Z","iopub.execute_input":"2025-02-26T07:38:03.42244Z","iopub.status.idle":"2025-02-26T07:38:04.244026Z","shell.execute_reply.started":"2025-02-26T07:38:03.422401Z","shell.execute_reply":"2025-02-26T07:38:04.242999Z"},"id":"H7JRjBtSvtq3"},"outputs":[],"execution_count":null},{"cell_type":"code","source":["#load the dataset\n","import os\n","import pandas as pd\n","print(\"Available datasets:\", os.listdir('/kaggle/input/'))\n","\n","dataset_dir = '/kaggle/input/d-data'\n","print(\"Files in dataset:\", os.listdir(dataset_dir))\n","\n","\n","# Load your data\n","data_path = \"/kaggle/input/d-data/divorce.xlsx\"\n","divorcee_data = pd.read_excel(data_path, engine=\"openpyxl\")\n"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-26T07:38:04.245799Z","iopub.execute_input":"2025-02-26T07:38:04.246299Z","iopub.status.idle":"2025-02-26T07:38:04.923829Z","shell.execute_reply.started":"2025-02-26T07:38:04.246266Z","shell.execute_reply":"2025-02-26T07:38:04.923009Z"},"id":"JYeEydM-vtq5","outputId":"886bf96b-843a-426a-f872-459d478f90aa"},"outputs":[{"name":"stdout","text":"Available datasets: ['d-data']\nFiles in dataset: ['divorce.xlsx']\n","output_type":"stream"}],"execution_count":null},{"cell_type":"markdown","source":["## Splitting the features and target"],"metadata":{"id":"FW3SGb3Bvtq7"}},{"cell_type":"code","source":["# Separate features (X) and target variable (Y)\n","X = divorcee_data.drop(columns=\"Class\", axis=1)\n","Y = divorcee_data[\"Class\"]\n","print(X)\n","print(Y)"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-26T07:38:04.925089Z","iopub.execute_input":"2025-02-26T07:38:04.925549Z","iopub.status.idle":"2025-02-26T07:38:04.953113Z","shell.execute_reply.started":"2025-02-26T07:38:04.925512Z","shell.execute_reply":"2025-02-26T07:38:04.952032Z"},"id":"MRERhk9Avtq8","outputId":"cd94b0b4-55e6-49db-ca9e-95d5169360ae"},"outputs":[{"name":"stdout","text":"     Atr1  Atr2  Atr3  Atr4  Atr5  Atr6  Atr7  Atr8  Atr9  Atr10  ...  Atr45  \\\n0       2     2     4     1     0     0     0     0     0      0  ...      3   \n1       4     4     4     4     4     0     0     4     4      4  ...      2   \n2       2     2     2     2     1     3     2     1     1      2  ...      2   \n3       3     2     3     2     3     3     3     3     3      3  ...      3   \n4       2     2     1     1     1     1     0     0     0      0  ...      2   \n..    ...   ...   ...   ...   ...   ...   ...   ...   ...    ...  ...    ...   \n165     0     0     0     0     0     0     0     0     0      0  ...      0   \n166     0     0     0     0     0     0     0     0     0      0  ...      3   \n167     1     1     0     0     0     0     0     0     0      1  ...      2   \n168     0     0     0     0     0     0     0     0     0      0  ...      4   \n169     0     0     0     0     0     0     0     1     0      0  ...      1   \n\n     Atr46  Atr47  Atr48  Atr49  Atr50  Atr51  Atr52  Atr53  Atr54  \n0        2      1      3      3      3      2      3      2      1  \n1        2      2      3      4      4      4      4      2      2  \n2        3      2      3      1      1      1      2      2      2  \n3        2      2      3      3      3      3      2      2      2  \n4        2      1      2      3      2      2      2      1      0  \n..     ...    ...    ...    ...    ...    ...    ...    ...    ...  \n165      1      0      4      1      1      4      2      2      2  \n166      4      1      2      2      2      2      3      2      2  \n167      3      0      2      0      1      1      3      0      0  \n168      3      3      2      2      3      2      4      3      1  \n169      3      4      4      0      1      3      3      3      1  \n\n[170 rows x 54 columns]\n0      1\n1      1\n2      1\n3      1\n4      1\n      ..\n165    0\n166    0\n167    0\n168    0\n169    0\nName: Class, Length: 170, dtype: int64\n","output_type":"stream"}],"execution_count":null},{"cell_type":"code","source":["# Standerdize data for better performabce\n","from sklearn.preprocessing import StandardScaler\n","\n","# Scale the features\n","scaler = StandardScaler()\n","X_scaled = scaler.fit_transform(X)"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-26T07:38:04.954168Z","iopub.execute_input":"2025-02-26T07:38:04.954534Z","iopub.status.idle":"2025-02-26T07:38:04.983987Z","shell.execute_reply.started":"2025-02-26T07:38:04.954501Z","shell.execute_reply":"2025-02-26T07:38:04.983038Z"},"id":"42dGA0kjvtq-"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":["## Split data into training and testing data"],"metadata":{"id":"g7NqBXmwvtq_"}},{"cell_type":"code","source":["from sklearn.model_selection import train_test_split\n","X_train, X_test, Y_train, y_test = train_test_split(X, Y, test_size=0.2, stratify = Y, random_state=2)"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-26T07:38:04.984922Z","iopub.execute_input":"2025-02-26T07:38:04.985209Z","iopub.status.idle":"2025-02-26T07:38:04.993754Z","shell.execute_reply.started":"2025-02-26T07:38:04.985183Z","shell.execute_reply":"2025-02-26T07:38:04.992703Z"},"id":"DCS96PEEvtrA"},"outputs":[],"execution_count":null},{"cell_type":"code","source":["print(X.shape, X_train.shape, X_test.shape)"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-26T07:38:04.994897Z","iopub.execute_input":"2025-02-26T07:38:04.995371Z","iopub.status.idle":"2025-02-26T07:38:05.00982Z","shell.execute_reply.started":"2025-02-26T07:38:04.995331Z","shell.execute_reply":"2025-02-26T07:38:05.008855Z"},"id":"6pjY-EZxvtrB","outputId":"9c26065d-3bd9-4dcc-d644-93f70e81b08d"},"outputs":[{"name":"stdout","text":"(170, 54) (136, 54) (34, 54)\n","output_type":"stream"}],"execution_count":null},{"cell_type":"markdown","source":["## Model Training"],"metadata":{"id":"oJvryNhOvtrC"}},{"cell_type":"markdown","source":["## SVM"],"metadata":{"id":"L5cve3DuvtrD"}},{"cell_type":"code","source":["from sklearn.svm import SVC\n","# Initialize the SVM modelfrrom sklearn.SVM_model import SVN\n","SVM_model = SVC(kernel='rbf', probability=True, random_state=42)\n","\n"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-26T07:38:05.012264Z","iopub.execute_input":"2025-02-26T07:38:05.012556Z","iopub.status.idle":"2025-02-26T07:38:05.022872Z","shell.execute_reply.started":"2025-02-26T07:38:05.012525Z","shell.execute_reply":"2025-02-26T07:38:05.021973Z"},"id":"KXYTsnulvtrD"},"outputs":[],"execution_count":null},{"cell_type":"code","source":["# Train the model\n","SVM_model.fit(X_train, Y_train)\n","\n","# Print a confirmation message\n","print(\"SVM model trained successfully!\")"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-26T07:38:05.024227Z","iopub.execute_input":"2025-02-26T07:38:05.024516Z","iopub.status.idle":"2025-02-26T07:38:05.050835Z","shell.execute_reply.started":"2025-02-26T07:38:05.024494Z","shell.execute_reply":"2025-02-26T07:38:05.049805Z"},"id":"eRo1OgH-vtrF","outputId":"dfd17199-bfbb-4d69-ff81-f80d8e4f24ba"},"outputs":[{"name":"stdout","text":"SVM model trained successfully!\n","output_type":"stream"}],"execution_count":null},{"cell_type":"code","source":["#Checking one Fold that has less percentage than the other folds\n","from sklearn.model_selection import KFold\n","import numpy as np\n","\n","# Perform 5-fold cross-validation manually\n","kf = KFold(n_splits=5, shuffle=True, random_state=42)\n","for fold, (train_idx, test_idx) in enumerate(kf.split(X)):\n","    X_train_fold, X_test_fold = X.iloc[train_idx], X.iloc[test_idx]\n","    Y_train_fold, Y_test_fold = Y.iloc[train_idx], Y.iloc[test_idx]\n","\n","    SVM_model.fit(X_train_fold, Y_train_fold)\n","    fold_accuracy = SVM_model.score(X_test_fold, Y_test_fold)\n","    print(f\"Fold {fold + 1} Accuracy: {fold_accuracy}\")\n","\n","    # Check class distribution in this fold\n","    print(f\"Class Distribution in Fold {fold + 1}:\\n\", Y_test_fold.value_counts())"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-26T07:39:21.120629Z","iopub.execute_input":"2025-02-26T07:39:21.120931Z","iopub.status.idle":"2025-02-26T07:39:21.180721Z","shell.execute_reply.started":"2025-02-26T07:39:21.12091Z","shell.execute_reply":"2025-02-26T07:39:21.17979Z"},"id":"9UnWOvcHvtrG","outputId":"26f9f97a-43dd-4f5b-aaf5-8ac12cb3b7ce"},"outputs":[{"name":"stdout","text":"Fold 1 Accuracy: 0.9705882352941176\nClass Distribution in Fold 1:\n Class\n1    20\n0    14\nName: count, dtype: int64\nFold 2 Accuracy: 0.9705882352941176\nClass Distribution in Fold 2:\n Class\n0    18\n1    16\nName: count, dtype: int64\nFold 3 Accuracy: 0.9705882352941176\nClass Distribution in Fold 3:\n Class\n0    18\n1    16\nName: count, dtype: int64\nFold 4 Accuracy: 0.9705882352941176\nClass Distribution in Fold 4:\n Class\n1    18\n0    16\nName: count, dtype: int64\nFold 5 Accuracy: 1.0\nClass Distribution in Fold 5:\n Class\n0    20\n1    14\nName: count, dtype: int64\n","output_type":"stream"}],"execution_count":null},{"cell_type":"markdown","source":["### Model Evaluation"],"metadata":{"id":"8cQ0ALo9vtrH"}},{"cell_type":"markdown","source":["#### Accuracy Score"],"metadata":{"id":"Auv-qkytvtrI"}},{"cell_type":"code","source":["from sklearn.model_selection import train_test_split\n","# acuracy on traing data\n","X_train_prediction = SVM_model.predict(X_train)\n","training_data_accuracy = accuracy_score(X_train_prediction, Y_train)\n","print('Accuracy on Training data : ', training_data_accuracy)"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-26T07:39:45.571903Z","iopub.execute_input":"2025-02-26T07:39:45.572282Z","iopub.status.idle":"2025-02-26T07:39:45.580355Z","shell.execute_reply.started":"2025-02-26T07:39:45.572229Z","shell.execute_reply":"2025-02-26T07:39:45.579501Z"},"id":"3Ifa49N7vtrI","outputId":"d4ed4a0f-2ee4-4c3e-81cd-a9d9c94282f1"},"outputs":[{"name":"stdout","text":"Accuracy on Training data :  0.9779411764705882\n","output_type":"stream"}],"execution_count":null},{"cell_type":"code","source":["\n","# acuracy on test data\n","X_test_prediction = SVM_model.predict(X_test)\n","test_data_accuracy = accuracy_score(X_test_prediction, y_test)\n","print('Accuracy on Test data : ', test_data_accuracy)"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-26T07:40:10.999436Z","iopub.execute_input":"2025-02-26T07:40:10.999778Z","iopub.status.idle":"2025-02-26T07:40:11.009379Z","shell.execute_reply.started":"2025-02-26T07:40:10.999752Z","shell.execute_reply":"2025-02-26T07:40:11.008224Z"},"id":"jyOReTAhvtrJ","outputId":"087c75df-d6a0-4c64-95ea-c0a4edbbdf49"},"outputs":[{"name":"stdout","text":"Accuracy on Test data :  1.0\n","output_type":"stream"}],"execution_count":null},{"cell_type":"markdown","source":["## SAVE MODEL"],"metadata":{"id":"3ftPrWPgvtrK"}},{"cell_type":"code","source":["import joblib\n","\n","# Save the trained model to a file\n","model_filename = 'SVM_model.pkl'\n","joblib.dump(SVM_model, model_filename)\n","print(f\"Model saved to {model_filename}\")"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-26T07:40:39.967459Z","iopub.execute_input":"2025-02-26T07:40:39.967792Z","iopub.status.idle":"2025-02-26T07:40:39.975293Z","shell.execute_reply.started":"2025-02-26T07:40:39.967771Z","shell.execute_reply":"2025-02-26T07:40:39.974381Z"},"id":"81kuounivtrL","outputId":"3c67e374-4da8-475d-9655-1f29e2aa621f"},"outputs":[{"name":"stdout","text":"Model saved to SVM_model.pkl\n","output_type":"stream"}],"execution_count":null},{"cell_type":"code","source":["import joblib\n","\n","# Load the saved model\n","model_filename = 'SVM_model.pkl'\n","SVM_model = joblib.load(model_filename)\n","print(\"Model loaded successfully!\")"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-26T07:40:50.848365Z","iopub.execute_input":"2025-02-26T07:40:50.848706Z","iopub.status.idle":"2025-02-26T07:40:50.857117Z","shell.execute_reply.started":"2025-02-26T07:40:50.848684Z","shell.execute_reply":"2025-02-26T07:40:50.856138Z"},"id":"AxHbNVyCvtrM","outputId":"28a5836b-aa71-4abf-a35f-2f8da53d2f30"},"outputs":[{"name":"stdout","text":"Model loaded successfully!\n","output_type":"stream"}],"execution_count":null},{"cell_type":"code","source":[],"metadata":{"trusted":true,"id":"sIIfAS0vvtrN"},"outputs":[],"execution_count":null},{"cell_type":"code","source":["from sklearn.model_selection import cross_val_score\n","#cross validation\n","cv_scores = cross_val_score(SVM_model, X, Y, cv=5, scoring='accuracy')\n","print(\"Cross-Validation Scores:\", cv_scores)\n","print(\"Mean CV Accuracy:\", cv_scores.mean())\n"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-26T07:40:55.32009Z","iopub.execute_input":"2025-02-26T07:40:55.320461Z","iopub.status.idle":"2025-02-26T07:40:55.369277Z","shell.execute_reply.started":"2025-02-26T07:40:55.320431Z","shell.execute_reply":"2025-02-26T07:40:55.368323Z"},"id":"1CQ_GYSovtrN","outputId":"d0d6f6fa-0442-4509-d725-72b2fba50031"},"outputs":[{"name":"stdout","text":"Cross-Validation Scores: [0.88235294 1.         1.         1.         1.        ]\nMean CV Accuracy: 0.9764705882352942\n","output_type":"stream"}],"execution_count":null},{"cell_type":"markdown","source":["Buiding a predicting System"],"metadata":{"id":"LDtQfLQAvtrO"}},{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","\n","# Sample input data\n","input_data = (2, 2, 4, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 2, 0, 1, 2, 1, 3, 3, 2, 1, 1, 2, 3, 2, 1, 3, 3, 3, 2, 3, 2, 1)\n","\n","# Convert input data to a DataFrame with feature names\n","input_data_df = pd.DataFrame([input_data], columns=X_train.columns)\n","\n","# Make prediction using DataFrame (which includes feature names)\n","prediction = SVM_model.predict(input_data_df)\n","\n","print(\"Prediction:\", prediction)\n","\n","\n","if (prediction[0] == 0):\n","    print('The couple is Not divorced')\n","else:\n","    print('The couple is Divorced')"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-26T07:41:11.340046Z","iopub.execute_input":"2025-02-26T07:41:11.340428Z","iopub.status.idle":"2025-02-26T07:41:11.351854Z","shell.execute_reply.started":"2025-02-26T07:41:11.340398Z","shell.execute_reply":"2025-02-26T07:41:11.350812Z"},"id":"DsOUD2nWvtrP","outputId":"a225c930-8a25-4151-efd1-4047e5ac2212"},"outputs":[{"name":"stdout","text":"Prediction: [0]\nThe couple is Not divorced\n","output_type":"stream"}],"execution_count":null},{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","\n","# Sample input data\n","input_data = (2,1,2,2,2,1,0,3,3,2,4,3,2,3,4,3,2,3,2,1,2,1,1,2,3,3,2,2,2,3,1,1,0,2,2,1,4,4,4,4,4,4,3,2,0,0,1,2,2,2,1,1,1,0)\n","\n","# Convert input data to a DataFrame with feature names\n","input_data_df = pd.DataFrame([input_data], columns=X_train.columns)\n","\n","# Make prediction using DataFrame (which includes feature names)\n","prediction = SVM_model.predict(input_data_df)\n","\n","print(\"Prediction:\", prediction)\n","\n","if (prediction[0] == 0):\n","    print('The couple is Not divorced')\n","else:\n","    print('The couple is Divorced')"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-26T07:41:28.498156Z","iopub.execute_input":"2025-02-26T07:41:28.498554Z","iopub.status.idle":"2025-02-26T07:41:28.508151Z","shell.execute_reply.started":"2025-02-26T07:41:28.498527Z","shell.execute_reply":"2025-02-26T07:41:28.507069Z"},"id":"cZMmtnYpvtrP","outputId":"1aa8211e-50eb-4575-adb1-9fc60ec8291f"},"outputs":[{"name":"stdout","text":"Prediction: [1]\nThe couple is Divorced\n","output_type":"stream"}],"execution_count":null},{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","\n","# Sample input data\n","input_data = (2, 2, 4, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 2, 0, 1, 2, 1, 3, 3, 2, 1, 1, 2, 3, 2, 1, 3, 3, 3, 2, 3, 2, 1)\n","\n","# Convert input data to a DataFrame with feature names\n","input_data_df = pd.DataFrame([input_data], columns=X_train.columns)\n","\n","# Make prediction using DataFrame (which includes feature names)\n","prediction = SVM_model.predict(input_data_df)\n","\n","print(\"Prediction:\", prediction)\n","\n","if (prediction[0] == 0):\n","    print('The couple is Not divorced')\n","else:\n","    print('The couple is Divorced')"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-26T07:41:48.942691Z","iopub.execute_input":"2025-02-26T07:41:48.943026Z","iopub.status.idle":"2025-02-26T07:41:48.953862Z","shell.execute_reply.started":"2025-02-26T07:41:48.942997Z","shell.execute_reply":"2025-02-26T07:41:48.953048Z"},"id":"fY6aSCTSvtrQ","outputId":"de7949d3-8b94-4358-aac4-faf26bec4c6f"},"outputs":[{"name":"stdout","text":"Prediction: [0]\nThe couple is Not divorced\n","output_type":"stream"}],"execution_count":null},{"cell_type":"markdown","source":["## OVERALL MODEL  EVALUATION"],"metadata":{"id":"8mBz_fP2vtrS"}},{"cell_type":"code","source":["import pandas as pd\n","from sklearn.model_selection import train_test_split\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix, classification_report\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","\n","# Make predictions on the test set\n","Y_test_prediction = SVM_model.predict(X_test)\n","\n","# Evaluate the model\n","accuracy = accuracy_score(y_test, Y_test_prediction)\n","precision = precision_score(y_test, Y_test_prediction)\n","recall = recall_score(y_test, Y_test_prediction)  # Sensitivity\n","f1 = f1_score(y_test, Y_test_prediction )\n","\n","# Confusion matrix\n","conf_matrix = confusion_matrix(y_test, Y_test_prediction )\n","\n","# Calculate specificity\n","tn, fp, fn, tp = conf_matrix.ravel()\n","specificity = tn / (tn + fp)\n","\n","# Performance (custom metric: average of accuracy, precision, recall, and F1-score)\n","performance = (accuracy + precision + recall + f1) / 4\n","\n","# Print evaluation metrics\n","print(\"Accuracy:\", accuracy)\n","print(\"Precision:\", precision)\n","print(\"Recall (Sensitivity):\", recall)\n","print(\"Specificity:\", specificity)\n","print(\"F1-Score:\", f1)\n","print(\"Performance (Custom Metric):\", performance)\n","print(\"Confusion Matrix:\\n\", conf_matrix)\n","print(\"Classification Report:\\n\", classification_report(y_test, Y_test_prediction))\n","\n","# Visualize confusion matrix\n","sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues',\n","            xticklabels=['No Divorce', 'Divorce'],\n","            yticklabels=['No Divorce', 'Divorce'])\n","plt.xlabel('Predicted')\n","plt.ylabel('Actual')\n","plt.title('Confusion Matrix')\n","plt.show()"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-26T07:43:21.934025Z","iopub.execute_input":"2025-02-26T07:43:21.934418Z","iopub.status.idle":"2025-02-26T07:43:22.247531Z","shell.execute_reply.started":"2025-02-26T07:43:21.934388Z","shell.execute_reply":"2025-02-26T07:43:22.246717Z"},"id":"oYsLhVVKvtrS","outputId":"778248fd-d268-410d-8821-ab9a4d4df7a2"},"outputs":[{"name":"stdout","text":"Accuracy: 1.0\nPrecision: 1.0\nRecall (Sensitivity): 1.0\nSpecificity: 1.0\nF1-Score: 1.0\nPerformance (Custom Metric): 1.0\nConfusion Matrix:\n [[17  0]\n [ 0 17]]\nClassification Report:\n               precision    recall  f1-score   support\n\n           0       1.00      1.00      1.00        17\n           1       1.00      1.00      1.00        17\n\n    accuracy                           1.00        34\n   macro avg       1.00      1.00      1.00        34\nweighted avg       1.00      1.00      1.00        34\n\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 2 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":null}]}